#!/usr/bin/env bash

HERE=`pwd`
set -exuo pipefail    # Print trace and do not keep running if something fails!

mkdir -p ~/bin
export PATH="$HOME/bin:$PATH"

# Platform-specific configuration

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	 # assume Debian-flavored Linux; may need to eventually support `pamac` or `pacman` too
    sudo apt update && sudo apt -y upgrade
	 sudo apt -y install \
         software-properties-common \
         apt-transport-https \
         wget \
         curl \
         git \
         imagemagick \
         ffmpeg \
         tidy \
         pandoc groff

    # Install vscode
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt -y install code

    # use brew too
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> ~/.profile
    echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.profile
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    brew update
    brew tap homebrew/cask
    #brew cask install visual-studio-code

    brew install \
      fd fzf \
      pre-commit \
      gpatch patchelf pkg-config


    # Standard XFCE configuration
    mkdir -p ~/.config
    cp -R $HERE/baseline/skel/dot.config/. ~/.config

    # Install Scala's Coursier native launcher
    curl -fLo ~/bin/cs https://git.io/coursier-cli-linux && chmod +x ~/bin/cs

elif [[ "$OSTYPE" == "darwin"* ]]; then

    if [[ `xcode-selct -p | grep Xcode.app` ]]; then
        echo 'xcode already installed; not reinstalling'
    else
        xcode-select --install        # Make sure xcode cli tools are there
    fi

	 # Install Homebrew; comment this if you have already installed it
	 # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

	 brew update
    brew tap homebrew/cask

    brew cask install visual-studio-code

    # A nice(r) graphical terminal than the default
    brew tap wez/wezterm
    brew install wezterm

    # Custom-compile Emacs because we want the xwidgets-based integrated web browser
    #brew cask install emacs
    brew tap daviderestivo/emacs-head
    brew install emacs-head --with-cocoa --with-imagemagick --with-xwidgets

	 brew install bash \                # Upgrade Mac's BASH to latest
		gpatch patchelf pkg-config \ # Misc build tools
		pre-commit \               # Git pre-commit hook support
		fzf fd \                   # fast cli search and autocomplete
		graphviz \
		imagemagick \              # for lsix, catimg
		libvpx \
		ubuntu/microk8s/microk8s \
		node \
		the_silver_searcher \      # `ag` fast source code search
		tidy-html5 \               # for `less <something>.html`
		pandoc groff \             # for `less <something>.md`
		hub \                      # Github on the command line
      aws-okta                   # For AWS SSO using Okta

	 # Huge workaround for installing ffmpeg
	 echo <<-EOF > "$HERE/install-ffmpeg"
		#!/usr/bin/env bash

      # Copied from https://gist.github.com/Piasy/b5dfd5c048eb69d1b91719988c0325d8#gistcomment-3314991

		# start clean. make sure you have xcode installed and all the other basics such as brew.
      brew uninstall --force ffmpeg chromaprint amiaopensource/amiaos/decklinksdk

      # installs ffmpeg vanilla as dependency
      brew install chromaprint amiaopensource/amiaos/decklinksdk

      # let's neuter that shit
      brew unlink ffmpeg

      # install dependencies to cook our own
      brew install automake fdk-aac git lame libass libtool libvorbis libvpx opus \
            sdl shtool texi2html theora wget x264 x265 xvid nasm
      # and we're done brewing. Lay off the beer for now.

      # clone head
      # if you ever want to update or customize FFmpeg at any point
      # just delete the binary (/usr/local/bin/ffmpeg in this case)
      # and start again from this step.
      git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
      cd ffmpeg

      # at this point, ChromaPrint has to be installed, else this step will fail.
      # sample compilation command. Customize this to your needs
      # the flags are different from the brew version LDO. RTFM.
      ./configure  --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass \
            --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame \
            --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 \
            --enable-libopus --enable-libxvid --enable-chromaprint --enable-decklink --samples=fate-suite/

      # the actual install once you're done configuring
      make && make install

      # ffmpeg should install to /usr/local/bin/ffmpeg. Test this out
      which ffmpeg
      ffmpeg -version
EOF
    chmod +x $HERE/install-ffmpeg
    echo "**** Placed a script to install-ffmpeg in $HERE ****"

    # Make new BASH the default shell
	 sudo echo "/usr/local/bin/bash" >> /etc/shells  # Allow new bash as a login shell
	 sudo chsh -s /usr/local/bin/bash   # For consistency across platforms

    # Install Scala's Coursier native launcher for Mac
    curl -fLo ~/bin/cs https://git.io/coursier-cli-macos &&
        chmod +x ~/bin/cs &&
        (xattr -d com.apple.quarantine ~/bin/cs || true)

elif [[ "$OSTYPE" == "cygwin" ]]; then
    echo "$OSTYPE - not implemented"
elif [[ "$OSTYPE" == "msys" ]]; then
    echo "$OSTYPE - not implemented"
elif [[ "$OSTYPE" == "win32" ]]; then
    echo "$OSTYPE - not implemented"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo "$OSTYPE - not implemented"
else
	 echo "Unknown operating system: $OSTYPE"
	 exit 1
fi

# Install fonts
cd baseline/fonts && ./install

# Install Java and standard Scala tools using Coursier
cs setup

# Git configuration boilerplate
git config --global init.defaultBranch main
git config --global user.name "David Orme"

# Emacs configuration boilerplate
mkdir -p ~/.localhistory-emacs
cd ~/.localhistory-emacs && git init
mkdir -p ~/.snippets
cp $HERE/TIME.org ~

# Set up minimal ~/bin
cp -R $HERE/baseline/skel/bin ~
PATH="$HOME/bin:$PATH"

# ...and ~/$(dotfiles)
ln -s ~/.emacs.d/dot.sbt ~/.sbt
cp $HERE/baseline/skel/dot.lessfilter ~/.lessfilter

# Ammonite config
mkdir -p ~/.ammonite
ln -s ~/.emacs.d/predef.scala ~/.ammonite/predef.scala


# Scala/Mill
MILL_REPO=https://github.com/lihaoyi/mill
MILL_VERSION=`latest-release $MILL_REPO`
curl -L $MILL_REPO/releases/download/$MILL_VERSION/$MILL_VERSION > ~/bin/mill
chmod +x ~/bin/mill

# Scala/Bloop
BLOOP_REPO=https://github.com/scalacenter/bloop
BLOOP_LATEST=`latest-release $BLOOP_REPO`
curl -L $BLOOP_REPO/releases/download/$BLOOP_LATEST/install.py | python



# Clojure boot/lein
curl -fsSLo ~/bin/boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh
chmod 755 ~/bin/boot

curl -fsSLo ~/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
chmod 755 ~/bin/lein

# Note: no 'latest' link on Maven's dl page; have to upgrade this manually
cd ~/bin && curl -fsSLo maven-latest.tgz http://apache.claz.org/maven/maven-3/3.9.0/binaries/apache-maven-3.9.0-bin.tar.gz
cd ~/bin && tar -xzvf maven-latest.tgz
cd ~/bin && ln -s apache-maven* maven
cd ~/bin && cat > ~/bin/mvn <<EOF
#!/bin/bash
export MAVEN_HOME=`pwd`/maven
export M2_HOME=`pwd`/maven
`pwd`/maven/bin/mvn $@
EOF
chmod 755 ~/bin/mvn

# Put all the bloopy things on the path
cat >> ~/.bashrc <<EOF

export PATH="$PATH:~/bin:~/.bloop"

. $HOME/.bloop/bash/bloop
EOF



echo "See the 'baseline' folder for common apps"
